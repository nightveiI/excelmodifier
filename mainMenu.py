# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QFileDialog, QListWidget, QMainWindow, QMessageBox
import sys
import json
import xlwings as xw
from datetime import date
import pandas as pd
# we import our settings
with open('config.json') as config:
    settings = json.load(config)

# we import the settings from the json file to see what indexes we need from the selected CSV files
indexes = ["Project ID", "Number Alt", "Project Name", "Building Name", "Building Address", "Building City", "Building State", "Building Zip", "Assigned To", "Type", "Subtype", "Status", "Status Date", "Who Created", "Date Created", "Modified", "Who Modified", "Bid Amount",  "Original Contract Amount", "Revised Contract Amount", "Outstanding Contract Amount", "Gross Profit Margin %", "Notes", "Actual Project Cost", "Actual Project Cost Who", "Actual Project Cost Date", "Source", "Budget Amount", "Budget Notes", "Budget Dates", "Contract With Object", "Contract With Name", "Contract With Office Name", "Salesperson Name",
           "Contract Terms", "Contract Term Notes", "Division", "Reference", "Subsource", "Client PO Number", "Local Union", "Construction Capacity", "Exclusions", "Special Instructions", "Contract Date", "Hide Daily Work Crew", "Running Notes", "Reference Notes", "Serial Number", "Production Status", "Contract Status", "Contract Status Date Open", "Contract Status Date Completed", "Contract Status Date Closed", "Contract Status Who Open", "Contract Status Who Completed", "Contract Status Who Closed", "Production Status Date", "Status Who", "Production Status Who", "Contact Name", "Contact Phone Number", "Contact Email"]


# this holds our selected csv file to be converted
selectedFile = ""

def lastRow(idx, workbook, col=1):
    """ Find the last row in the worksheet that contains data.

    idx: Specifies the worksheet to select. Starts counting from zero.

    workbook: Specifies the workbook

    col: The column in which to look for the last cell containing data.
    """

    ws = workbook.sheets[idx]

    lwr_r_cell = ws.cells.last_cell      # lower right cell
    lwr_row = lwr_r_cell.row             # row of the lower right cell
    lwr_cell = ws.range((lwr_row, col))  # change to your specified column

    if lwr_cell.value is None:
        lwr_cell = lwr_cell.end('up')    # go up untill you hit a non-empty cell

    return lwr_cell.row

# we declare what workbooks we are going to be using and what sheets we are going to be using
# in this case, we need a clean new workbook and opening the export from dataforma 
# the sheets we are going to be using are, from the new workbook: general, steep, and low slope
# and the dataforma export which is all jumbled together with the other columns we don't want for the current data analysis


def convert(file, selectedSettings):
    xw.App(visible=False)
    today = date.today()
    # dd/mm/YY
    # Month abbreviation, day and year
    # we use this variable to name our file and save at the end
    d = today.strftime("%b_%d_%Y")

    # we open the workbook we are going to be using
    newWB = xw.Book()
    dfWB = xw.Book(file.replace(".csv", ".xlsx"))

    # we open the sheets we are going to be using according to our sorting settings

    sortingSettings = None

    for i in range(len(indexes)):
        if(indexes[i] == selectedSettings["Sorting Settings"][0][indexes[i]]):
            sortingSettings = indexes[i]



class Ui_settingsWindow(object):
    def setupUi(self, settingsWindow):
        settingsWindow.setObjectName("settingsWindow")
        settingsWindow.resize(287, 385)
        self.centralwidget = QtWidgets.QWidget(settingsWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(10, 10, 258, 303))
        self.widget.setObjectName("widget")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)

        self.verticalLayout.setObjectName("verticalLayout")

        #this widget label indicates to the user what the following combo box is for
        self.sortingLabel = QtWidgets.QLabel(self.widget)
        self.sortingLabel.setObjectName("sortingLabel")
        self.sortingLabel.setText("Sort Items By")
        self.verticalLayout.addWidget(self.sortingLabel)

        #this is the combo box that allows the user to select the item to sort by
        self.sortBy = QtWidgets.QComboBox(self.widget)
        self.sortBy.setCurrentText("")
        self.sortBy.setObjectName("sortBy")
        self.verticalLayout.addWidget(self.sortBy)
        
        #this widget label indicates to the user what the following combo box is for
        self.divideLabel = QtWidgets.QLabel(self.widget)
        self.divideLabel.setObjectName("divideLabel")
        self.divideLabel.setText("Divide Sheets By")
        self.verticalLayout.addWidget(self.divideLabel)

        #this is the combo box that allows the user to select the item to divide by
        self.divideBy = QtWidgets.QComboBox(self.widget)
        self.divideBy.setObjectName("divideBy")
        self.verticalLayout.addWidget(self.divideBy)

        #this widget label indicates to the user what the following combo box is for
        self.orderLabel = QtWidgets.QLabel(self.widget)
        self.orderLabel.setObjectName("orderLabel")
        self.orderLabel.setText("Sort by Ascending or Descending Order")
        self.verticalLayout.addWidget(self.orderLabel)

        #this is the combo box that allows the user to select the order to sort by
        #ascending or descending being a-z or z-a
        self.ascendDescend = QtWidgets.QComboBox(self.widget)
        self.ascendDescend.setObjectName("ascendDescend")
        self.verticalLayout.addWidget(self.ascendDescend)

        #this widget label indicates to the user what the following list widget is for
        self.itemsLabel = QtWidgets.QLabel(self.widget)
        self.itemsLabel.setObjectName("itemsLabel")
        self.itemsLabel.setText("Select the items you would like to convert")

        #this is the list widget that allows the user to select the items to convert 
        self.verticalLayout.addWidget(self.itemsLabel)
        self.itemsShown = QtWidgets.QListWidget(self.widget)
        self.itemsShown.setObjectName("itemsShown")
        self.verticalLayout.addWidget(self.itemsShown)
        settingsWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(settingsWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 278, 21))
        self.menubar.setObjectName("menubar")

        settingsWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(settingsWindow)
        self.statusbar.setObjectName("statusbar")
        settingsWindow.setStatusBar(self.statusbar)

        #since our settingsWindow is an instance of the Ui_settingsWindow class, we set the closeEvent of the settingsWindow to the closeEvent function in the Ui_settingsWindow class
        settingsWindow.closeEvent = self.closeEvent
        #this sets the currently saved settings in the config.json 
        self.getSettings()

        self.retranslateUi(settingsWindow)
        QtCore.QMetaObject.connectSlotsByName(settingsWindow)

    def retranslateUi(self, settingsWindow):
        _translate = QtCore.QCoreApplication.translate
        settingsWindow.setWindowTitle(
            _translate("settingsWindow", "MainWindow"))

    #this function is called to when the user first opens the interface or when they access the settings window
    def getSettings(self):
        #this sets the currently saved settings in the config.json
        #the following for loop sets the values of the combo boxes and list widget to the saved settings
        for i in range(len(indexes)):
            #here we receive the settings we use to select what items we retrieve from the original dataforma datasheet and have it converted 
            #into the export
            #if the settings are true, we add the index to the list widget checked
            if(settings['Convert Settings'][0][indexes[i]]):
                item = QtWidgets.QListWidgetItem()
                item.setText(indexes[i])
                item.setCheckState(QtCore.Qt.Checked)
                self.itemsShown.addItem(item)
            #if the settings are false, we add the index to the list widget unchecked
            else:
                item = QtWidgets.QListWidgetItem()
                item.setText(indexes[i])
                item.setCheckState(QtCore.Qt.Unchecked)
                self.itemsShown.addItem(item)
            #this sets the sorting combo box to the saved settings
            #if the found settings are false, we simply add them to the list in the combo box
            if(not settings['Sorting Settings'][0][indexes[i]]):
                self.sortBy.addItem(indexes[i])
            #however, if the settings found are true, we add them to the combo box and set the combo box index to this current index
            #as the default value to sort by 
            else:
                self.sortBy.addItem(indexes[i])
                self.sortBy.setCurrentIndex(i)
            #this sets the sorting combo box to the saved settings
            #if the found settings are false, we simply add them to the list in the combo box
            if(not settings['Divide Settings'][0][indexes[i]]):
                self.divideBy.addItem(indexes[i])
            #however, if the settings found are true, we add them to the dividing combo box and set the dividing combo box index to this current index
            #as the default value to sort by 
            else:
                self.divideBy.addItem(indexes[i])
                self.divideBy.setCurrentIndex(i)
        #this sets the order combo box to ascending or descending
        self.ascendDescend.addItem("Ascending")
        self.ascendDescend.addItem("Descending")
        #if the saved settings are true, we set the combo box index to 0 wher it is ascending
        if(settings['Order Settings'][0]["Ascending"]):
            self.ascendDescend.setCurrentIndex(0)
        #if the saved settings are false, we set the combo box index to 1 where it is descending
        else:
            self.ascendDescend.setCurrentIndex(1)
    
    #this function is called when the user clicks the close button on the settings window
    def saveSettings(self):
        #we iterate throughout the entire listed indexes within the widget and combo boxes to save the settings
        for i in range(self.itemsShown.count()):
            #if the item is checked, we set the settings to true
            if(self.itemsShown.item(i).checkState() == QtCore.Qt.Checked):
                settings['Convert Settings'][0][indexes[i]] = True
            #if the item is unchecked, we set the settings to false
            else:
                settings['Convert Settings'][0][indexes[i]] = False
            #we find if the current index is the same as the selected combo box index for sorting
            #if it is, we set the settings to true to be the default index to sort by next time the user opens the settings window
            if(indexes[i] == self.sortBy.currentText()):
                settings['Sorting Settings'][0][indexes[i]] = True
            #if it is not, we set the settings to false to not be the default index to sort by next time the user opens the settings window
            else:
                settings['Sorting Settings'][0][indexes[i]] = False
            #we find if the current index is the same as the selected combo box index for dividing
            #if it is, we set the settings to true to be the default index to divide by next time the user opens the settings window
            if(indexes[i] == self.divideBy.currentText()):
                settings['Divide Settings'][0][indexes[i]] = True
            #if it is not, we set the settings to false to not be the default index to divide by next time the user opens the settings window
            else:
                settings['Divide Settings'][0][indexes[i]] = False

        #if the user selects ascending, we set the settings to true and false to the other option 
        if(self.ascendDescend.currentIndex() == 0):
            settings['Order Settings'][0]["Ascending"] = True
            settings['Order Settings'][0]["Descending"] = False
        #if the user selects descending, we set the settings to false and true to the other option
        else:
            settings['Order Settings'][0]["Ascending"] = False
            settings['Order Settings'][0]["Descending"] = True
        #we save the settings to the config.json
        with open('config.json', 'w') as outfile:
            json.dump(settings, outfile, indent=2)
    
    #this function is called when the user closes the settings window
    def closeEvent(self, event):
        #we call the save settings function to save the settings
        self.saveSettings()
        #we close the settings window
        event.accept()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.resize(280, 400)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("MVR Dataforma Converter")

        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setGeometry(QtCore.QRect(50, 20, 181, 141))
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setObjectName("splitter")

        self.splitter_2 = QtWidgets.QSplitter(self.splitter)
        self.splitter_2.setOrientation(QtCore.Qt.Vertical)
        self.splitter_2.setObjectName("splitter_2")

        self.selectButton = QtWidgets.QPushButton(self.splitter_2)
        self.selectButton.setToolTip("")
        self.selectButton.setObjectName("selectButton")

        self.convertButton = QtWidgets.QPushButton(self.splitter_2)
        self.convertButton.setToolTip("")
        self.convertButton.setObjectName("convertButton")

        self.settingsButton = QtWidgets.QPushButton(self.splitter_2)
        self.settingsButton.setToolTip("")
        self.settingsButton.setObjectName("settingsButton")
        MainWindow.setCentralWidget(self.centralwidget)

        self.actionsDone = QtWidgets.QListWidget(self.centralwidget)
        self.actionsDone.setGeometry(QtCore.QRect(10, 180, 256, 192))

        self.actionsDone.setObjectName("actionsDone")

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.selectButton.clicked.connect(lambda: self.clicked("Select"))
        self.convertButton.clicked.connect(lambda: self.clicked("Convert"))
        self.settingsButton.clicked.connect(lambda: self.clicked("Settings"))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate(
            "MainWindow", "Dataforma Converter"))
        self.selectButton.setStatusTip(_translate(
            "MainWindow", "Browse and select desired CSV file"))
        self.selectButton.setText(_translate("MainWindow", "Select"))
        self.convertButton.setStatusTip(_translate(
            "MainWindow", "Converts selected CSV file to formatted XLSX"))
        self.convertButton.setText(_translate("MainWindow", "Convert"))
        self.settingsButton.setStatusTip(_translate(
            "MainWindow", "Access your format settings "))
        self.settingsButton.setText(_translate("MainWindow", "Settings"))

    #this function is called when the user clicks on any of the buttons
    #depending on the text of the button, the function will do different things
    def clicked(self, text):
        #if the user clicks on the select button, we call the select function
        #where the user is prompted to select a csv file in their directories
        if(text == "Select"):
            global selectedFile
            selectedFile = QFileDialog.getOpenFileName(
                MainWindow, 'Open file', 'c:\\', "Comma Seperated Values (*.csv)")
            #if the user selects a file, we add the file to the list of actions done
            if(selectedFile[0] != ""):
                self.actionsDone.addItem("Selected file: " + selectedFile[0])
            else:
                self.actionsDone.addItem("No file selected")
        
        #if the user clicks on the convert button, we call the convert function
        if(text == "Convert"):
            #if the user has not selected a file, we prompt them to select a file
            #otherwise we convert to the settings selected from the config json or their current modified settings
            if(selectedFile[0] != "" and selectedFile != None):
                #convert(selectedFile[0], settings)
                self.actionsDone.addItem("Converting selected file")
            else:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setText("Please select a file to convert")
                msg.setWindowTitle("No File Selected")
                msg.exec_()
        #if the user clicks on the settings button, we call the settings function
        #where the user can modify their settings
        if(text == "Settings"):
            settingsWindow.show()
            self.actionsDone.addItem("Settings Opened")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    settingsWindow = QtWidgets.QMainWindow()

    settingui = Ui_settingsWindow()
    settingui.setupUi(settingsWindow)

    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    # we check if this is our first launch to set the default settings for the prespective user
    if(settings['First Launch']):
        settingsWindow.show()
        settings['First Launch'] = False
    sys.exit(app.exec_())
